{
  "name": "Forum G≈Çosowe - Kontakty",
  "short_name": "Kontakty",
  "start_url": "/wizytowka.html",
  "display": "standalone",
  "background_color": "#2c2f33",
  "theme_color": "#7289da",
  "description": "Szybkie wybieranie ulubionych kontakt√≥w z Forum G≈Çosowego.",
  "icons": [
    {
      "src": "icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}```
*(Uwaga: Potrzebujesz dw√≥ch ikon: `icon-192.png` i `icon-512.png` w g≈Ç√≥wnym katalogu)*

#### Plik 2: `call.html` (Ekran odbierania po≈ÇƒÖczenia)
To jest strona, kt√≥ra otworzy siƒô po klikniƒôciu powiadomienia.

```html
--- START OF FILE call.html ---
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Po≈ÇƒÖczenie przychodzƒÖce</title>
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <style>
        body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #1e2124; color: white; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; text-align: center; }
        .container { display: flex; flex-direction: column; align-items: center; gap: 20px; }
        .caller-info { font-size: 2rem; font-weight: bold; }
        .buttons { display: flex; gap: 30px; margin-top: 40px; }
        .call-btn { width: 80px; height: 80px; border-radius: 50%; border: none; cursor: pointer; display: flex; justify-content: center; align-items: center; font-size: 2.5rem; transition: background-color 0.2s; }
        #answer-btn { background-color: #43b581; }
        #decline-btn { background-color: #dc3545; }
        #answer-btn:hover { background-color: #3aa873; }
        #decline-btn:hover { background-color: #c82333; }
        #forum-link { margin-top: 50px; color: #99aab5; text-decoration: none; }
    </style>
</head>
<body>
    <div class="container">
        <div class="caller-info" id="caller-name">Dzwoni...</div>
        <div class="buttons">
            <button id="decline-btn" class="call-btn" title="Odrzuƒá">‚ùå</button>
            <button id="answer-btn" class="call-btn" title="Odbierz">üìû</button>
        </div>
    </div>
    <a href="/index.html" id="forum-link">Przejd≈∫ do Forum</a>

    <script>
        const hfSpaceUrl = "eosforus-chat.hf.space";
        const wsUrl = `wss://${hfSpaceUrl}/ws/`;
        const urlParams = new URLSearchParams(window.location.search);
        const caller = urlParams.get('caller');
        const callee = urlParams.get('callee');

        let socket, peerConnection;
        let ringtone = new Audio('ringtone.mp3');
        ringtone.loop = true;

        document.getElementById('caller-name').textContent = `Dzwoni: ${caller}`;
        
        const answerBtn = document.getElementById('answer-btn');
        const declineBtn = document.getElementById('decline-btn');

        // Odtwarzaj dzwonek po wej≈õciu na stronƒô
        ringtone.play().catch(e => console.warn("Interakcja u≈ºytkownika potrzebna do odtworzenia d≈∫wiƒôku.", e));
        
        answerBtn.onclick = () => {
            ringtone.pause();
            connectAndAnswer();
        };

        declineBtn.onclick = () => {
            ringtone.pause();
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'call_declined', payload: { caller: caller } }));
            }
            window.close(); // Zamknij kartƒô po odrzuceniu
        };

        function connectAndAnswer() {
            socket = new WebSocket(wsUrl);
            socket.onopen = () => {
                const storedUser = localStorage.getItem('forumUsername');
                const storedPass = localStorage.getItem('forumPassword');
                if (storedUser && storedPass !== null) {
                    socket.send(JSON.stringify({ type: 'join', payload: { username: storedUser, password: storedPass } }));
                } else {
                    alert("B≈ÇƒÖd logowania. Zaloguj siƒô na forum i popro≈õ o ponowne po≈ÇƒÖczenie.");
                }
            };
            socket.onmessage = (event) => {
                const data = JSON.parse(event.data);
                switch (data.type) {
                    case 'join_success':
                        // Pomy≈õlnie zalogowano, informujemy dzwoniƒÖcego, ≈ºe odebrali≈õmy
                        socket.send(JSON.stringify({ type: 'call_answered', payload: { caller: caller } }));
                        // Teraz mo≈ºemy nawiƒÖzaƒá po≈ÇƒÖczenie WebRTC
                        initializeWebRTC();
                        break;
                    case 'webrtc_signal':
                        handleWebRTCSignal(data.payload.sender, data.payload.signal);
                        break;
                }
            };
        }

        async function initializeWebRTC() {
            try {
                const localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                peerConnection = createPeerConnection(caller);
                localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
            } catch (err) {
                console.error("B≈ÇƒÖd dostƒôpu do mikrofonu:", err);
                alert("Nie mo≈ºna uzyskaƒá dostƒôpu do mikrofonu.");
            }
        }

        function createPeerConnection(targetUser) {
            const pc = new RTCPeerConnection({ iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] });
            pc.onicecandidate = e => e.candidate && sendSignal(targetUser, { type: 'ice-candidate', candidate: e.candidate });
            pc.ontrack = event => {
                const audio = document.createElement('audio');
                audio.srcObject = event.streams[0];
                audio.autoplay = true;
                document.body.appendChild(audio);
            };
            pc.onconnectionstatechange = () => {
                if (pc.connectionState === 'disconnected' || pc.connectionState === 'closed' || pc.connectionState === 'failed') {
                    window.close();
                }
            };
            return pc;
        }

        function sendSignal(recipient, signal) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'webrtc_signal', payload: { recipient, signal } }));
            }
        }
        
        async function handleWebRTCSignal(sender, signal) {
            if (!peerConnection) peerConnection = createPeerConnection(sender);
            try {
                if (signal.type === 'offer') {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription({ type: 'offer', sdp: signal.sdp }));
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    sendSignal(sender, { type: 'answer', sdp: answer.sdp });
                } else if (signal.type === 'ice-candidate') {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(signal.candidate));
                }
            } catch (err) {
                console.error(`B≈ÇƒÖd obs≈Çugi sygna≈Çu WebRTC od ${sender}:`, err);
            }
        }
    </script>
</body>
</html>
